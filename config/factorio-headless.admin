#!/bin/bash
#
# Script to help with installing mods and controling server
#
NAME="Factorio Headless Admin"
VERSION="0.17"
ALL_MODS=$SNAP_COMMON/temp/all-mods.json
USERNAME=$(snapctl get username)
TOKEN=$(snapctl get token)

# Colors for whiptail windows 
export NEWT_COLORS='
root=,magenta
'

# Main menu
main_menu(){
	MENU=""
	selected=$(whiptail --notags --title "$NAME" --menu "$MENU" 0 0 0 \
		--ok-button "Select" --cancel-button "Exit" \
		1 "Server" \
		2 "Mods" \
		3 "Help" \
		3>&1 1>&2 2>&3)
	case $selected in
		1) server_submenu ;;
		2) mods_submenu ;;
		3) help_submenu ;;
		*) exit 0 ;;
	esac
}

#
#
#
server_submenu(){
	MENU="\n   Server"
	selected=$(whiptail --notags --title "$NAME" --menu "$MENU" 0 0 0 \
		--ok-button "Select" --cancel-button "Back" \
		1 "Status" \
		2 "Start" \
		3 "Restart" \
		4 "Stop" \
		5 "Log" \
		3>&1 1>&2 2>&3)
	case $selected in
		1) server_status ;;
		2) server_start ;;
		3) server_restart ;;
		4) server_stop ;;
		5) server_log ;;
		*) main_menu ;;
	esac
}

server_status(){
	STATUS=$(snapctl services factorio-headless)
	whiptail --title "$NAME" --msgbox "$STATUS" 0 0 0 3>&1 1>&2 2>&3
	server_submenu
}

server_start(){
	snapctl start factorio-headless
	if [ $? -eq 0 ]; then
		whiptail --title "$NAME" --msgbox "Started server" 0 0 0 3>&1 1>&2 2>&3
	else
		whiptail --title "$NAME" --msgbox "Error starting server" 0 0 0 3>&1 1>&2 2>&3
		server_log
	fi
	server_submenu
}

server_restart(){
	snapctl restart factorio-headless
	if [ $? -eq 0 ]; then
		whiptail --title "$NAME" --msgbox "Restarted server" 0 0 0 3>&1 1>&2 2>&3
	else
		whiptail --title "$NAME" --msgbox "Error restarting server" 0 0 0 3>&1 1>&2 2>&3
		server_log
	fi
	server_submenu
}

server_stop(){
	snapctl stop factorio-headless
	if [ $? -eq 0 ]; then
		whiptail --title "$NAME" --msgbox "Stopped server" 0 0 0 3>&1 1>&2 2>&3
	else
		whiptail --title "$NAME" --msgbox "Error stoping server" 0 0 0 3>&1 1>&2 2>&3
		server_log
	fi
	server_submenu
}

server_log(){
	whiptail --title "$NAME" --textbox "$SNAP_COMMON/factorio-current.log" 0 0 0 3>&1 1>&2 2>&3
	server_submenu
}

#
#
#
mods_submenu(){
	MENU="\n   Mods"
	selected=$(whiptail --notags --title "$NAME" --menu "$MENU" 0 0 0 \
		--ok-button "Select" --cancel-button "Back" \
		1 "Search" \
		2 "Select" \
		3 "Remove" \
		4 "Update" \
		3>&1 1>&2 2>&3)
	case $selected in
		1) mods_search ;;
		2) mods_select ;;
		3) mods_remove ;;
		4) mods_update ;;
		*) main_menu ;;
	esac
}

mods_search(){
	search=$(whiptail --inputbox "\n   Search for mods" 0 50 --title "$NAME" \
		--ok-button "Search" --cancel-button "Back" \
		3>&1 1>&2 2>&3)
	if [ $? = 0 ]; then
		mods_search_results "$search"
	else
	    mods_submenu
	fi
}

mods_search_results(){

	# create results list
	oIFS=$IFS
	IFS=$'\n'
	i=1
	for mod in $(jq -r --arg version $VERSION '(.results[] | select(.latest_release.info_json.factorio_version == $version)) .title' $ALL_MODS); do
		if [[ "${mod,,}" == *${@,,}* ]]; then
			results[$i]="${mod}"
			((i++))
		fi
	done
	IFS=$oIFS

	# check if results
	if [ ${i} -gt 1 ]; then

		# create menu options for selection
		i=1
		menu_options=()
		for option in "${results[@]}"; do
			menu_options+=( ${i//\"} "${option//\"}" )
			((i++))
		done

		# show selected or return to main menu
		selected=$(whiptail --menu "Search Results" 0 0 0 "${menu_options[@]}" 3>&1 1>&2 2>&3)
		if [ $? = 0 ]; then
			mods_search_install	"${results[$selected]}" "$1"
		else
			mods_submenu
		fi

	# no results
	else
		whiptail --title "Search Results" --msgbox "There are no results for this query." 0 0
		mods_search
	fi
	
}

mods_search_install(){

	# Get information from mods.json file
	owner=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .owner' $ALL_MODS)
	downloads=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .downloads_count' $ALL_MODS)
	version=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .latest_release.version' $ALL_MODS)
	summary=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .summary' $ALL_MODS)	

	message="Owner: ${owner}\nVersion: ${version}\nDownloads: ${downloads}\n\n${summary}\n\nInstall this mod?"

	if (whiptail --title "${1}" --yesno "${message}" 0 0); then

		# Download mod
		download_url=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .latest_release.download_url' $ALL_MODS)
		file_name=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .latest_release.file_name' $ALL_MODS)

		curl -o $SNAP_COMMON/mods/$file_name -L "https://mods.factorio.com/${download_url}?username=${$USERNAME}&token=${TOKEN}"

		# Add to mod-list.json
		name=$(jq -r --arg title "${1}" '(.results[] | select(.title == $title)) .name' $ALL_MODS)
		mod_list=$(jq --arg name "${name}" '.mods |= . + [{"name":$name,"enabled":true}]' $SNAP_COMMON/mods/mod-list.json)
		echo $mod_list > $SNAP_COMMON/mods/mod-list.json

		mods_search_results "${2}"
	else
    	mods_search_results "${2}"
	fi
}

mods_select(){

	# Available mods
	select_options=()
	for mod in $(jq -r '.mods[] | .name' $SNAP_COMMON/mods/mod-list.json); do

		# Base mod is not in mod list
		if [ "${mod}" != "base" ]; then
			title=$(jq -r --arg name "${mod}" '(.results[] | select(.name == $name)) .title' $ALL_MODS)
		else
			title="Factorio"
		fi

		# get selected options in mod-list.json
		enabled=$(jq -r --arg name "${mod}" '(.mods[] | select(.name == $name)) .enabled' $SNAP_COMMON/mods/mod-list.json)
		if [ "${enabled}" == "true" ]; then
			select_options+=( "${mod}" "${title}" ON)
		else
			select_options+=( "${mod}" "${title}" OFF)
		fi
	done

	# 
	selected=$(whiptail --title "$NAME" --checklist "Select mods" 0 0 0 "${select_options[@]}" 3>&1 1>&2 2>&3)
	if [ $? = 0 ]; then

		# make all disabled then go trough selected and enable those
		mod_list=$(cat $SNAP_COMMON/mods/mod-list.json | jq '.mods[] .enabled = false')

		selected="${selected//\"}"
		for mod in ${selected[@]}; do
			mod_list=$(echo $mod_list | jq --arg name "${mod}" '(.mods[] | select(.name == $name)) .enabled = true')
		done

		# save to file and return to main menu
		echo $mod_list > $SNAP_COMMON/mods/mod-list.json
		main_menu
	else
		mods_submenu
	fi
}

mods_remove(){
	whiptail --title "$NAME" --msgbox "TODO" 0 0 0 3>&1 1>&2 2>&3
	mods_submenu
}

mods_update(){
	curl --silent "https://mods.factorio.com/api/mods?page_size=max" > $ALL_MODS
	# TODO
	#whiptail --title "$NAME" --msgbox "Mods updated!" 0 0 0 3>&1 1>&2 2>&3
	mods_submenu
}

#
#
#
help_submenu(){
	MENU="\n   Help"
	selected=$(whiptail --notags --title "$NAME" --menu "$MENU" 0 0 0 \
		--ok-button "Select" --cancel-button "Back" \
		1 "Commands" \
		2 "Files" \
		3>&1 1>&2 2>&3)
	case $selected in
		1) help_commands ;;
		2) help_files ;;
		*) main_menu ;;
	esac
}

help_commands(){
	whiptail --title "$NAME" --msgbox "TODO" 0 0 0 3>&1 1>&2 2>&3
	help_submenu
}

help_files(){
	whiptail --title "$NAME" --msgbox "TODO" 0 0 0 3>&1 1>&2 2>&3
	help_submenu
}

#
# 
#
user_auth(){
	if [ -z "$USERNAME" ]; then
		USERNAME=$(whiptail --inputbox "\n   Username?" 0 50 --title "$NAME" \
			--ok-button "Submit" --cancel-button "Back" \
			3>&1 1>&2 2>&3)	
	fi

	PASSWORD=$(snapctl get password)
	if [ -z "$PASSWORD" ]; then
		PASSWORD=$(whiptail --inputbox "\n   Password?" 0 50 --title "$NAME" \
			--ok-button "Submit" --cancel-button "Back" \
			3>&1 1>&2 2>&3)
	fi

	TOKEN=$(curl --data "username=${USERNAME}&password=${PASSWORD}" https://auth.factorio.com/api-login | jq -r .[0])
	snapctl set username="$USERNAME"
	snapctl set token="$TOKEN"
}

if [ "$EUID" -ne 0 ]; then
	echo "Run as root! Server files are located in protected directory."
	echo "sudo factorio-headless"
	exit 1
fi

if [ ${#} -gt 0 ]; then
	${SNAP}/factorio/bin/x64/factorio $@
	exit $?
else

	#if [ -z "$USERNAME" ] || [ -z "$TOKEN" ]; then
	#	user_auth
	#fi

	if [ ! -e $ALL_MODS ]; then
		mods_update
	fi

	main_menu
fi









